name: Mind map
description: ""
args:
    nodes: {type: "string", value: "root;x=0;y=0;s=uml_start", name: "Nodes encoded", hidden: true}
    connectorType : {type: 'choice', value: 'pretty', options: ['pretty', 'linear', 'smooth', 'step', 'step-cut', 'step-smooth'], name: 'Connectors Type'}
    capSize: {type: 'number', value: 15, name: 'Cap size'}
    capType : {type: 'path-cap', value: 'triangle', name: 'Cap type'}
    iconSize: {type: 'number', value: 20, name: 'Icon size'}
    showProgress: {type: 'boolean', value: false, name: 'Show Progress'}
    progressSize: {type: 'number', value: 20, name: 'Progress Icon Size', depends: {showProgress: true}}
    gradientProgress: {type: 'boolean', value: true, name: 'Gradient Progress', depends: {showProgress: true}}
    progressColor: {type: 'color', value: '#F35B3B', name: 'Progress Icon Color', depends: {showProgress: true}}
    progressColor2: {type: 'color', value: '#E5AB2D', name: 'Progress Icon Color 2', depends: {showProgress: true}}
    progressColor3: {type: 'color', value: '#13D481', name: 'Progress Icon Color 3', depends: {showProgress: true, gradientProgress: true}}
preview: "/assets/templates/previews/mind-map.svg"
defaultArea: {x: 0, y: 0, w: 200, h: 60}

import:
    - ./src/item.sch
    - ./src/control.sch
    - ./src/mind-map.sch

handlers:
    delete: onDeleteItem(itemId, item)
    area: onAreaUpdate(itemId, item, area)
    copy: onCopyItem(itemId, item)
    paste: onPasteItems(itemId, items)

controls:
-   $-foreach: {source: "controls", it: "control"}
    $-extend: {$-expr: "toJSON(control)"}

editor:
    panels:

    -   id: node-progress
        condition: 'shouldNodeProgressEditorBeDisplayed(selectedItemIds)'
        type: item-menu
        click: 'selectProgressForItems(selectedItemIds, panelItem)'
        name: Select progress
        slotSize:
            width: {$-expr: "progressSize * 2"}
            height: {$-expr: "progressSize * 2"}
        items:
        -   $-foreach: {source: 'getAllProgressIconItems()', it: 'it'}
            $-extend: {$-expr: 'toJSON(it)'}


    -   id: node-icon-selector
        condition: 'shouldNodeIconSelectorBeDisplayed(selectedItemIds)'
        type: item-menu
        click: 'selectIconForItems(selectedItemIds, panelItem)'
        name: Choose icons
        slotSize:
            width: 30
            height: 30
        items:
        -   $-foreach: {source: "getAllAvailableIcons()",  it: 'icon'}
            id: {$-expr: icon.id}
            name: {$-expr: icon.id}
            shape: 'image'
            area: {x: -2, y: -2, w: 26, h: 26}
            shapeProps:
                image: {$-expr: "icon.url"}

    -   id: node-shape-selector
        condition: 'shouldNodeShapeSelectorBeDisplayed(selectedItemIds)'
        type: item-menu
        click: 'selectShapeForItems(selectedItemIds, panelItem)'
        name: Select shape
        slotSize:
            width: 80
            height: 40
        items:
        -   id: 'rect'
            shape: 'rect'
            area: {w: 72, h: 32}
            shapeProps:
                cornerRadius: 0
                fill: { type: 'none'}

        -   id: 'rounded-rect'
            shape: 'rect'
            area: {w: 72, h: 32}
            shapeProps:
                cornerRadius: 10
                fill: { type: 'none'}

        -   id: 'start'
            shape: 'uml_start'
            area: {w: 72, h: 32}
            shapeProps:
                fill: { type: 'none'}

        -   id: 'ellipse'
            shape: 'ellipse'
            area: {w: 72, h: 32}
            shapeProps:
                cornerRadius: 5
                fill: { type: 'none'}

        -   id: 'basic_diamond'
            shape: 'basic_diamond'
            area: {w: 72, h: 32}
            shapeProps:
                fill: { type: 'none'}

        -   id: 'uml_preparation'
            shape: 'uml_preparation'
            area: {w: 72, h: 32}
            shapeProps:
                fill: { type: 'none'}

        -   id: 'label'
            shape: 'none'
            area: {w: 72, h: 32}
            textSlots:
                body:
                    text: 'Simple label'

    -   id: node-operations
        condition: 'shouldNodeOperationsPanelBeDisplayed(selectedItemIds)'
        type: buttons
        name: Operations
        click: 'onOperationsPanelClick(selectedItemIds, panelItem)'
        buttons:
        -   id: insert-new-parent
            name: Insert new parent

        -   id: delete-node-preserve-children
            name: Delete (preserve children)

item:
    $-recurse: {object: {"$-expr": "rootItem"}, it: 'it', children: 'it.childItems', dstChildren: 'childItems'}
    id: {$-expr: "it.id"}
    name: {$-expr: "`${it.name}`"}
    shape: {$-expr: "it.shape"}
    shapeProps: {$-expr: "toJSON(it.shapeProps)"}
    args: {$-expr: "it.getArgs()"}
    locked: {$-expr: "it.locked"}
    textSlots: {$-expr: "toJSON(it.textSlots)"}
    area:
        x: {$-expr: "it.x"}
        y: {$-expr: "it.y"}
        w: {$-expr: "it.w"}
        h: {$-expr: "it.h"}

